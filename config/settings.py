"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
import environ

env = environ.Env(
    DEBUG=(bool, False),
    USE_MYSQL=(bool, False),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOG_DIR = Path(BASE_DIR) / 'logs'
LOG_DIR.mkdir(exist_ok=True)

# Load environment variables from .env
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "users.apps.UsersConfig",
    "bookings",
    "listings",
    "reviews",
    "analytics.apps.AnalyticsConfig",

    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "django_filters",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "config.middleware.JWTAuthenticationMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "config.middleware.RequestContextMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# Choose between SQLite and MySQL via USE_MYSQL env var
if env.bool("USE_MYSQL"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": env("MYSQL_NAME"),
            "USER": env("MYSQL_USER"),
            "PASSWORD": env("MYSQL_PASSWORD"),
            "HOST": env("MYSQL_HOST"),
            "PORT": env("MYSQL_PORT"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Europe/Berlin"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "utils.exceptions.custom_exception_handler",

    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],

    # You can enable one of the pagination styles below if needed:
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 5,  # Page size for PageNumberPagination

    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    # "PAGE_SIZE": 10,  # Acts as 'default_limit' for LimitOffsetPagination

    # Custom cursor pagination (use full dotted path):
    # "DEFAULT_PAGINATION_CLASS": "config.paginations.CustomCursorPagination",
    # "PAGE_SIZE": 5,

    # Authentication — how users prove their identity
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        # "rest_framework.authentication.TokenAuthentication",
        # "rest_framework.authentication.SessionAuthentication",
        # "rest_framework.authentication.BasicAuthentication",
    ],

    # Authorization — what authenticated users are allowed to do
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
}

SIMPLE_JWT = {
    # Access token lifetime (short)
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    # Refresh token lifetime (long)
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    # Enable refresh token rotation for better security
    "ROTATE_REFRESH_TOKENS": True,
    # Blacklist the old refresh token after rotation
    "BLACKLIST_AFTER_ROTATION": True,
    # Authorization header type
    "AUTH_HEADER_TYPES": ("Bearer",),
    "TOKEN_OBTAIN_SERIALIZER": "users.serializers.jwt.MyTokenObtainPairSerializer",
}

# How many days before check-in a tenant can cancel a booking.
# Example: 1 => cancellation allowed strictly before 1 day prior to start_date (not on the check-in day).
BOOKING_CANCEL_DEADLINE_DAYS = 1  # 0 => allow until the day before check-in (excluding the check-in day)


LOG_FORMAT_VERBOSE = "[%(asctime)s] %(levelname)s %(name)s req=%(request_id)s user=%(user_id)s: %(message)s"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,

    "filters": {
        "request_context": {"()": "config.logging_utils.RequestContextFilter"},
    },

    "formatters": {
        "verbose": {"format": LOG_FORMAT_VERBOSE},
        "simple": {"format": "%(levelname)s %(message)s"},
    },

    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG" if DEBUG else "INFO",
            "formatter": "simple",
            "filters": ["request_context"],
        },
        "app_file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": str(LOG_DIR / "app.log"),
            "when": "midnight",
            "backupCount": 14,
            "encoding": "utf-8",
            "level": "INFO",
            "formatter": "verbose",
            "filters": ["request_context"],
        },
        "err_file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": str(LOG_DIR / "errors.log"),
            "when": "midnight",
            "backupCount": 30,
            "encoding": "utf-8",
            "level": "ERROR",
            "formatter": "verbose",
            "filters": ["request_context"],
        },
        "db_file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": str(LOG_DIR / "db.log"),
            "when": "midnight",
            "backupCount": 7,
            "encoding": "utf-8",
            "level": "DEBUG" if DEBUG else "WARNING",
            "formatter": "verbose",
            "filters": ["request_context"],
        },
    },

    "loggers": {
        # ваш код по умолчанию
        "": {
            "handlers": ["console", "app_file"],
            "level": "DEBUG" if DEBUG else "INFO",
        },

        # ошибки HTTP (4xx/5xx) от Django
        "django.request": {
            "handlers": ["err_file", "console"],
            "level": "ERROR",
            "propagate": False,
        },

        # SQL — подробно только в DEBUG
        "django.db.backends": {
            "handlers": ["db_file"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },

        # security предупреждения (CSRF, SuspiciousOperation)
        "django.security": {
            "handlers": ["err_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },

        # Access-лог из нашего middleware
        "access": {
            "handlers": ["console", "app_file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
